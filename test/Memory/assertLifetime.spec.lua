local Package = game:GetService("ReplicatedStorage").Fusion
local assertLifetime = require(Package.Memory.assertLifetime)

return function()
	it("allows correct order in flat arrays", function()
		expect(assertLifetime({"p", "c"}, "p", "c")).to.equal(true)
		expect(assertLifetime({1, 2, 3, "p", "c", 4, 5, 6}, "p", "c")).to.equal(true)
		expect(assertLifetime({1, "p", 2, 3, 4, "c", 5, 6}, "p", "c")).to.equal(true)
		expect(assertLifetime({"p", 1, 2, 3, 4, 5, 6, "c"}, "p", "c")).to.equal(true)
		expect(assertLifetime({"p", "c", 1, 2, 3, 4, 5, 6}, "p", "c")).to.equal(true)
		expect(assertLifetime({1, 2, 3, 4, 5, 6, "p", "c"}, "p", "c")).to.equal(true)
	end)
	it("disallows incorrect order in flat arrays", function()
		expect(assertLifetime({"c", "p"}, "p", "c")).to.equal(false)
		expect(assertLifetime({1, 2, 3, "c", "p", 4, 5, 6}, "p", "c")).to.equal(false)
		expect(assertLifetime({1, "c", 2, 3, 4, "p", 5, 6}, "p", "c")).to.equal(false)
		expect(assertLifetime({"c", 1, 2, 3, 4, 5, 6, "p"}, "p", "c")).to.equal(false)
		expect(assertLifetime({"c", "p", 1, 2, 3, 4, 5, 6}, "p", "c")).to.equal(false)
		expect(assertLifetime({1, 2, 3, 4, 5, 6, "c", "p"}, "p", "c")).to.equal(false)
	end)
	it("disallows absent children in flat arrays", function()
		expect(assertLifetime({"p"}, "p", "c")).to.equal(false)
		expect(assertLifetime({1, 2, 3, "p", 4, 5, 6}, "p", "c")).to.equal(false)
		expect(assertLifetime({"p", 1, 2, 3, 4, 5, 6}, "p", "c")).to.equal(false)
		expect(assertLifetime({1, 2, 3, 4, 5, 6, "p"}, "p", "c")).to.equal(false)
	end)
	it("allows correct order in nested arrays", function()
		expect(assertLifetime({{"p"}, {"c"}}, "p", "c")).to.equal(true)
		expect(assertLifetime({1, {2, 3, "p"}, "c", 4, 5, 6}, "p", "c")).to.equal(true)
		expect(assertLifetime({{1, {"p"}}, 2, {3, 4}, {"c", 5, 6}}, "p", "c")).to.equal(true)
		expect(assertLifetime({"p", 1, 2, 3, {4, 5, 6, "c"}}, "p", "c")).to.equal(true)
		expect(assertLifetime({"p", {"c", 1, 2, 3, 4}, 5, 6}, "p", "c")).to.equal(true)
		expect(assertLifetime({1, {{2, 3}, 4, 5, 6, "p"}, "c"}, "p", "c")).to.equal(true)
	end)
	it("disallows incorrect order in nested arrays", function()
		expect(assertLifetime({{"c"}, {"p"}}, "p", "c")).to.equal(false)
		expect(assertLifetime({1, {2, 3, "c"}, "p", 4, 5, 6}, "p", "c")).to.equal(false)
		expect(assertLifetime({{1, {"c"}}, 2, {3, 4}, {"p", 5, 6}}, "p", "c")).to.equal(false)
		expect(assertLifetime({"c", 1, 2, 3, {4, 5, 6, "p"}}, "p", "c")).to.equal(false)
		expect(assertLifetime({"c", {"p", 1, 2, 3, 4}, 5, 6}, "p", "c")).to.equal(false)
		expect(assertLifetime({1, {{2, 3}, 4, 5, 6, "c"}, "p"}, "p", "c")).to.equal(false)
	end)
	it("disallows absent children in nested arrays", function()
		expect(assertLifetime({{"p"}}, "p", "c")).to.equal(false)
		expect(assertLifetime({1, {2, 3, "p"}, 4, 5, 6}, "p", "c")).to.equal(false)
		expect(assertLifetime({"p", 1, 2, 3, {4, 5, 6}}, "p", "c")).to.equal(false)
		expect(assertLifetime({1, {{2, 3}, 4, 5, 6}, "p"}, "p", "c")).to.equal(false)
	end)
end